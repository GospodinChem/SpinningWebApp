// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SpinningWebApp.Data;

#nullable disable

namespace SpinningWebApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240306165356_MigrationSpinningWebDb")]
    partial class MigrationSpinningWebDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SpinningWebApp.Data.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("acbd3cde-f96e-4a60-955e-7290a41f155c"),
                            Name = "Въдици"
                        },
                        new
                        {
                            Id = new Guid("9f63652a-fb08-43d0-ac49-a2a281c359f9"),
                            Name = "Макари"
                        },
                        new
                        {
                            Id = new Guid("e4ea4f50-b25a-4bd9-9120-0df23d58a544"),
                            Name = "Воблери"
                        },
                        new
                        {
                            Id = new Guid("048d205d-9915-45b2-b1a5-1bc3492f778d"),
                            Name = "Силикони"
                        },
                        new
                        {
                            Id = new Guid("a36b9232-06c7-4376-b949-8b26caded4e2"),
                            Name = "Джиг Глави"
                        },
                        new
                        {
                            Id = new Guid("e3046b57-b98d-4ab0-9be8-c6a2b010c6a3"),
                            Name = "Блесни"
                        },
                        new
                        {
                            Id = new Guid("1622cefc-0438-490d-9d3d-8fa18d6a6cdb"),
                            Name = "Куки"
                        },
                        new
                        {
                            Id = new Guid("591f697e-1a88-4600-95f2-8462048bec13"),
                            Name = "Влакна"
                        },
                        new
                        {
                            Id = new Guid("d8f10838-039f-40f0-b04f-49f7e764ca6f"),
                            Name = "Аксесоари"
                        });
                });

            modelBuilder.Entity("SpinningWebApp.Data.Models.Manufacturer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f21230e5-9600-4113-bc2a-18c01affdf26"),
                            Name = "Shimano"
                        },
                        new
                        {
                            Id = new Guid("1d236990-57ab-4b2e-a29e-c9db415ea40c"),
                            Name = "Fiiish"
                        },
                        new
                        {
                            Id = new Guid("4fa26fc5-94a9-40fe-a0b3-3f3adbf7b793"),
                            Name = "DAM"
                        },
                        new
                        {
                            Id = new Guid("f6a51fbb-359e-4b34-a620-a12e28d5dbe7"),
                            Name = "Last Cast"
                        },
                        new
                        {
                            Id = new Guid("8336b7c5-d582-41b9-b2cb-3021053c7871"),
                            Name = "Ima"
                        },
                        new
                        {
                            Id = new Guid("48216279-e574-41c2-b631-f59ab5f07830"),
                            Name = "Jackson"
                        },
                        new
                        {
                            Id = new Guid("fe6692da-6330-4c1a-a5e2-512596cd54a1"),
                            Name = "Savage Gear"
                        },
                        new
                        {
                            Id = new Guid("5a47142a-1640-4d1e-bcc3-2bed04110c77"),
                            Name = "Lurefans"
                        },
                        new
                        {
                            Id = new Guid("3a77a577-3659-4722-9768-3b001cdcd99b"),
                            Name = "Mepps"
                        });
                });

            modelBuilder.Entity("SpinningWebApp.Data.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AvailableAmount")
                        .HasColumnType("int");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<string>("MainImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ManufacturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5ad1ea09-52eb-4296-8321-b278b06e920c"),
                            AvailableAmount = 12,
                            CategoryId = new Guid("9f63652a-fb08-43d0-ac49-a2a281c359f9"),
                            Description = "Mn qka makara kurti paveta",
                            MainImageURL = "https://fishingzone.bg/thumbs/1/2301271942421.jpg",
                            ManufacturerId = new Guid("f21230e5-9600-4113-bc2a-18c01affdf26"),
                            Model = "Stella FK 4000XG ",
                            Price = 1453.5
                        },
                        new
                        {
                            Id = new Guid("45b72494-1287-4eb6-b22b-4a672a9bd01c"),
                            AvailableAmount = 16,
                            CategoryId = new Guid("acbd3cde-f96e-4a60-955e-7290a41f155c"),
                            Description = "Giga ceps vudica",
                            MainImageURL = "https://fishingzone.bg/thumbs/1/2312281539051.jpg",
                            ManufacturerId = new Guid("fe6692da-6330-4c1a-a5e2-512596cd54a1"),
                            Model = "Revenge SG6 Medium Game",
                            Price = 419.0
                        },
                        new
                        {
                            Id = new Guid("3ab3f6d1-f45d-4c80-b9ac-f4cade704097"),
                            AvailableAmount = 20,
                            CategoryId = new Guid("e4ea4f50-b25a-4bd9-9120-0df23d58a544"),
                            Description = "Brutaliika si e nqa da luja",
                            MainImageURL = "https://fishingzone.bg/thumbs/1/2311101433471.jpg",
                            ManufacturerId = new Guid("48216279-e574-41c2-b631-f59ab5f07830"),
                            Model = "Jester Minnow 78S",
                            Price = 32.899999999999999
                        });
                });

            modelBuilder.Entity("SpinningWebApp.Data.Models.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("SpinningWebApp.Data.Models.ProductSpecification", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SpecificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SpecificationValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId", "SpecificationId");

                    b.HasIndex("SpecificationId");

                    b.ToTable("ProductSpecifications");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("5ad1ea09-52eb-4296-8321-b278b06e920c"),
                            SpecificationId = new Guid("51df7fb1-3dbb-404f-83a7-c4ba29924e8a"),
                            SpecificationValue = "4000"
                        },
                        new
                        {
                            ProductId = new Guid("5ad1ea09-52eb-4296-8321-b278b06e920c"),
                            SpecificationId = new Guid("0cbdb686-255b-49af-bc29-baa847698674"),
                            SpecificationValue = "260"
                        },
                        new
                        {
                            ProductId = new Guid("5ad1ea09-52eb-4296-8321-b278b06e920c"),
                            SpecificationId = new Guid("ae093a3e-1422-4160-91ae-643863ad2cc2"),
                            SpecificationValue = "6:2:1"
                        },
                        new
                        {
                            ProductId = new Guid("5ad1ea09-52eb-4296-8321-b278b06e920c"),
                            SpecificationId = new Guid("44af333e-836d-47e0-a952-4bc710084f0e"),
                            SpecificationValue = "11"
                        },
                        new
                        {
                            ProductId = new Guid("5ad1ea09-52eb-4296-8321-b278b06e920c"),
                            SpecificationId = new Guid("4d6bbf88-4575-431a-872f-a59675280416"),
                            SpecificationValue = "12 + 1"
                        },
                        new
                        {
                            ProductId = new Guid("5ad1ea09-52eb-4296-8321-b278b06e920c"),
                            SpecificationId = new Guid("40cee526-7844-47fe-a8ef-b7a958a08328"),
                            SpecificationValue = "Не"
                        },
                        new
                        {
                            ProductId = new Guid("45b72494-1287-4eb6-b22b-4a672a9bd01c"),
                            SpecificationId = new Guid("a6646f07-e2c1-4d98-9217-84610c559640"),
                            SpecificationValue = "2.13"
                        },
                        new
                        {
                            ProductId = new Guid("45b72494-1287-4eb6-b22b-4a672a9bd01c"),
                            SpecificationId = new Guid("d08a39d1-e733-4d06-ac14-3505297db741"),
                            SpecificationValue = "2"
                        },
                        new
                        {
                            ProductId = new Guid("45b72494-1287-4eb6-b22b-4a672a9bd01c"),
                            SpecificationId = new Guid("da41d540-1c1d-4f3d-a1ea-c8ab24cde666"),
                            SpecificationValue = "110"
                        },
                        new
                        {
                            ProductId = new Guid("45b72494-1287-4eb6-b22b-4a672a9bd01c"),
                            SpecificationId = new Guid("0cbdb686-255b-49af-bc29-baa847698674"),
                            SpecificationValue = "121"
                        },
                        new
                        {
                            ProductId = new Guid("45b72494-1287-4eb6-b22b-4a672a9bd01c"),
                            SpecificationId = new Guid("8426024c-9b8d-4c17-8aba-272dbf44311b"),
                            SpecificationValue = "7-25"
                        },
                        new
                        {
                            ProductId = new Guid("45b72494-1287-4eb6-b22b-4a672a9bd01c"),
                            SpecificationId = new Guid("b4898ce8-8844-4d2f-aa43-8c284320c953"),
                            SpecificationValue = "бяла риба, костур, распер"
                        },
                        new
                        {
                            ProductId = new Guid("3ab3f6d1-f45d-4c80-b9ac-f4cade704097"),
                            SpecificationId = new Guid("a6646f07-e2c1-4d98-9217-84610c559640"),
                            SpecificationValue = "78"
                        },
                        new
                        {
                            ProductId = new Guid("3ab3f6d1-f45d-4c80-b9ac-f4cade704097"),
                            SpecificationId = new Guid("0cbdb686-255b-49af-bc29-baa847698674"),
                            SpecificationValue = "11.5"
                        },
                        new
                        {
                            ProductId = new Guid("3ab3f6d1-f45d-4c80-b9ac-f4cade704097"),
                            SpecificationId = new Guid("d3984888-6e3d-4a83-ab71-9fffd96b0fe2"),
                            SpecificationValue = "потъващ"
                        },
                        new
                        {
                            ProductId = new Guid("3ab3f6d1-f45d-4c80-b9ac-f4cade704097"),
                            SpecificationId = new Guid("ea34b8b1-d49a-426d-825b-f60fd7b81f27"),
                            SpecificationValue = "1.0 - 2.0"
                        });
                });

            modelBuilder.Entity("SpinningWebApp.Data.Models.SessionProduct", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "SessionId");

                    b.HasIndex("SessionId");

                    b.ToTable("SessionProducts");
                });

            modelBuilder.Entity("SpinningWebApp.Data.Models.Specification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SpecName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Specifications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a6646f07-e2c1-4d98-9217-84610c559640"),
                            SpecName = "Дължина"
                        },
                        new
                        {
                            Id = new Guid("d08a39d1-e733-4d06-ac14-3505297db741"),
                            SpecName = "Брой секции"
                        },
                        new
                        {
                            Id = new Guid("da41d540-1c1d-4f3d-a1ea-c8ab24cde666"),
                            SpecName = "Транспортна дължина"
                        },
                        new
                        {
                            Id = new Guid("0cbdb686-255b-49af-bc29-baa847698674"),
                            SpecName = "Тегло"
                        },
                        new
                        {
                            Id = new Guid("8426024c-9b8d-4c17-8aba-272dbf44311b"),
                            SpecName = "Работен диапазон"
                        },
                        new
                        {
                            Id = new Guid("b4898ce8-8844-4d2f-aa43-8c284320c953"),
                            SpecName = "Вид риба"
                        },
                        new
                        {
                            Id = new Guid("51df7fb1-3dbb-404f-83a7-c4ba29924e8a"),
                            SpecName = "Размер"
                        },
                        new
                        {
                            Id = new Guid("ae093a3e-1422-4160-91ae-643863ad2cc2"),
                            SpecName = "Предавателно число"
                        },
                        new
                        {
                            Id = new Guid("44af333e-836d-47e0-a952-4bc710084f0e"),
                            SpecName = "Драг"
                        },
                        new
                        {
                            Id = new Guid("4d6bbf88-4575-431a-872f-a59675280416"),
                            SpecName = "Брой лагери"
                        },
                        new
                        {
                            Id = new Guid("40cee526-7844-47fe-a8ef-b7a958a08328"),
                            SpecName = "С резервна шпула"
                        },
                        new
                        {
                            Id = new Guid("1033a627-5da8-487c-9cd9-29a189cf8ca2"),
                            SpecName = "Вместимост на шпулата"
                        },
                        new
                        {
                            Id = new Guid("ea34b8b1-d49a-426d-825b-f60fd7b81f27"),
                            SpecName = "Дълбочина на газене"
                        },
                        new
                        {
                            Id = new Guid("d3984888-6e3d-4a83-ab71-9fffd96b0fe2"),
                            SpecName = "Тип"
                        },
                        new
                        {
                            Id = new Guid("58c1801c-9524-4e25-b7da-0fa39bbce408"),
                            SpecName = "Форма"
                        },
                        new
                        {
                            Id = new Guid("8d177397-c7d2-4295-ba29-6b98eda1993b"),
                            SpecName = "С тракалка"
                        },
                        new
                        {
                            Id = new Guid("ec2b5636-feab-48e5-8d4d-407fb00ec11c"),
                            SpecName = "Вкус и аромат"
                        },
                        new
                        {
                            Id = new Guid("f9d7d9c0-4e24-4520-9b66-9307d57dfb95"),
                            SpecName = "UV/Glow цветове"
                        },
                        new
                        {
                            Id = new Guid("39bed3aa-f31f-43d9-b7ab-9f6d6e2e0652"),
                            SpecName = "Окомплектовани с глава и кука"
                        });
                });

            modelBuilder.Entity("SpinningWebApp.Data.Models.UserSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SessionType")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("SpinningWebApp.Models.Account.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SpinningWebApp.Models.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SpinningWebApp.Models.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpinningWebApp.Models.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SpinningWebApp.Models.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpinningWebApp.Data.Models.Product", b =>
                {
                    b.HasOne("SpinningWebApp.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpinningWebApp.Data.Models.Manufacturer", "Manufacturer")
                        .WithMany("Products")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("SpinningWebApp.Data.Models.ProductImage", b =>
                {
                    b.HasOne("SpinningWebApp.Data.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SpinningWebApp.Data.Models.ProductSpecification", b =>
                {
                    b.HasOne("SpinningWebApp.Data.Models.Product", "Product")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpinningWebApp.Data.Models.Specification", "Specification")
                        .WithMany("ProductSpecifications")
                        .HasForeignKey("SpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Specification");
                });

            modelBuilder.Entity("SpinningWebApp.Data.Models.SessionProduct", b =>
                {
                    b.HasOne("SpinningWebApp.Data.Models.Product", "Product")
                        .WithMany("SessionProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpinningWebApp.Data.Models.UserSession", "UserSession")
                        .WithMany("SessionProducts")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("UserSession");
                });

            modelBuilder.Entity("SpinningWebApp.Data.Models.UserSession", b =>
                {
                    b.HasOne("SpinningWebApp.Models.Account.User", "User")
                        .WithOne("Session")
                        .HasForeignKey("SpinningWebApp.Data.Models.UserSession", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SpinningWebApp.Data.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SpinningWebApp.Data.Models.Manufacturer", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SpinningWebApp.Data.Models.Product", b =>
                {
                    b.Navigation("ProductAttributes");

                    b.Navigation("ProductImages");

                    b.Navigation("SessionProducts");
                });

            modelBuilder.Entity("SpinningWebApp.Data.Models.Specification", b =>
                {
                    b.Navigation("ProductSpecifications");
                });

            modelBuilder.Entity("SpinningWebApp.Data.Models.UserSession", b =>
                {
                    b.Navigation("SessionProducts");
                });

            modelBuilder.Entity("SpinningWebApp.Models.Account.User", b =>
                {
                    b.Navigation("Session")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
